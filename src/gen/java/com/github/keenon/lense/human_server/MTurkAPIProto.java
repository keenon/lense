// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/proto/MTurkAPI.proto

package com.github.keenon.lense.human_server;

public final class MTurkAPIProto {
  private MTurkAPIProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code com.github.keenon.lense.human_server.MessageType}
   */
  public enum MessageType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>GetNumberOfWorkers = 1;</code>
     */
    GetNumberOfWorkers(0, 1),
    /**
     * <code>HireWorkers = 2;</code>
     */
    HireWorkers(1, 2),
    ;

    /**
     * <code>GetNumberOfWorkers = 1;</code>
     */
    public static final int GetNumberOfWorkers_VALUE = 1;
    /**
     * <code>HireWorkers = 2;</code>
     */
    public static final int HireWorkers_VALUE = 2;


    public final int getNumber() { return value; }

    public static MessageType valueOf(int value) {
      switch (value) {
        case 1: return GetNumberOfWorkers;
        case 2: return HireWorkers;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MessageType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
            public MessageType findValueByNumber(int number) {
              return MessageType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.github.keenon.lense.human_server.MTurkAPIProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final MessageType[] VALUES = values();

    public static MessageType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MessageType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.github.keenon.lense.human_server.MessageType)
  }

  public interface MTurkAPIRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.github.keenon.lense.human_server.MTurkAPIRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    com.github.keenon.lense.human_server.MTurkAPIProto.MessageType getType();

    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that will be included in all responses, so that they can be routed correctly
     * </pre>
     */
    boolean hasReqID();
    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that will be included in all responses, so that they can be routed correctly
     * </pre>
     */
    int getReqID();

    /**
     * <code>optional int32 numToHire = 3;</code>
     *
     * <pre>
     * This gets set in the HireWorkers type message
     * </pre>
     */
    boolean hasNumToHire();
    /**
     * <code>optional int32 numToHire = 3;</code>
     *
     * <pre>
     * This gets set in the HireWorkers type message
     * </pre>
     */
    int getNumToHire();
  }
  /**
   * Protobuf type {@code com.github.keenon.lense.human_server.MTurkAPIRequest}
   */
  public static final class MTurkAPIRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.github.keenon.lense.human_server.MTurkAPIRequest)
      MTurkAPIRequestOrBuilder {
    // Use MTurkAPIRequest.newBuilder() to construct.
    private MTurkAPIRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MTurkAPIRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MTurkAPIRequest defaultInstance;
    public static MTurkAPIRequest getDefaultInstance() {
      return defaultInstance;
    }

    public MTurkAPIRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MTurkAPIRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.github.keenon.lense.human_server.MTurkAPIProto.MessageType value = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              reqID_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              numToHire_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.class, com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<MTurkAPIRequest> PARSER =
        new com.google.protobuf.AbstractParser<MTurkAPIRequest>() {
      public MTurkAPIRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MTurkAPIRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MTurkAPIRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.github.keenon.lense.human_server.MTurkAPIProto.MessageType type_;
    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    public com.github.keenon.lense.human_server.MTurkAPIProto.MessageType getType() {
      return type_;
    }

    public static final int REQID_FIELD_NUMBER = 2;
    private int reqID_;
    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that will be included in all responses, so that they can be routed correctly
     * </pre>
     */
    public boolean hasReqID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that will be included in all responses, so that they can be routed correctly
     * </pre>
     */
    public int getReqID() {
      return reqID_;
    }

    public static final int NUMTOHIRE_FIELD_NUMBER = 3;
    private int numToHire_;
    /**
     * <code>optional int32 numToHire = 3;</code>
     *
     * <pre>
     * This gets set in the HireWorkers type message
     * </pre>
     */
    public boolean hasNumToHire() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 numToHire = 3;</code>
     *
     * <pre>
     * This gets set in the HireWorkers type message
     * </pre>
     */
    public int getNumToHire() {
      return numToHire_;
    }

    private void initFields() {
      type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
      reqID_ = 0;
      numToHire_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReqID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, reqID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, numToHire_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, reqID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numToHire_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.github.keenon.lense.human_server.MTurkAPIRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.github.keenon.lense.human_server.MTurkAPIRequest)
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.class, com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.Builder.class);
      }

      // Construct using com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
        bitField0_ = (bitField0_ & ~0x00000001);
        reqID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        numToHire_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_descriptor;
      }

      public com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest getDefaultInstanceForType() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.getDefaultInstance();
      }

      public com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest build() {
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest buildPartial() {
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest result = new com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reqID_ = reqID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numToHire_ = numToHire_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest) {
          return mergeFrom((com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest other) {
        if (other == com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasReqID()) {
          setReqID(other.getReqID());
        }
        if (other.hasNumToHire()) {
          setNumToHire(other.getNumToHire());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasReqID()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.github.keenon.lense.human_server.MTurkAPIProto.MessageType type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public com.github.keenon.lense.human_server.MTurkAPIProto.MessageType getType() {
        return type_;
      }
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public Builder setType(com.github.keenon.lense.human_server.MTurkAPIProto.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
        onChanged();
        return this;
      }

      private int reqID_ ;
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that will be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public boolean hasReqID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that will be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public int getReqID() {
        return reqID_;
      }
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that will be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public Builder setReqID(int value) {
        bitField0_ |= 0x00000002;
        reqID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that will be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public Builder clearReqID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reqID_ = 0;
        onChanged();
        return this;
      }

      private int numToHire_ ;
      /**
       * <code>optional int32 numToHire = 3;</code>
       *
       * <pre>
       * This gets set in the HireWorkers type message
       * </pre>
       */
      public boolean hasNumToHire() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 numToHire = 3;</code>
       *
       * <pre>
       * This gets set in the HireWorkers type message
       * </pre>
       */
      public int getNumToHire() {
        return numToHire_;
      }
      /**
       * <code>optional int32 numToHire = 3;</code>
       *
       * <pre>
       * This gets set in the HireWorkers type message
       * </pre>
       */
      public Builder setNumToHire(int value) {
        bitField0_ |= 0x00000004;
        numToHire_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numToHire = 3;</code>
       *
       * <pre>
       * This gets set in the HireWorkers type message
       * </pre>
       */
      public Builder clearNumToHire() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numToHire_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.github.keenon.lense.human_server.MTurkAPIRequest)
    }

    static {
      defaultInstance = new MTurkAPIRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.github.keenon.lense.human_server.MTurkAPIRequest)
  }

  public interface MTurkAPIResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.github.keenon.lense.human_server.MTurkAPIResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    com.github.keenon.lense.human_server.MTurkAPIProto.MessageType getType();

    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that is be included in all responses, so that they can be routed correctly
     * </pre>
     */
    boolean hasReqID();
    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that is be included in all responses, so that they can be routed correctly
     * </pre>
     */
    int getReqID();

    /**
     * <code>optional int32 numWorkers = 4;</code>
     *
     * <pre>
     * Returns for GetNumberOfWorkers requests
     * </pre>
     */
    boolean hasNumWorkers();
    /**
     * <code>optional int32 numWorkers = 4;</code>
     *
     * <pre>
     * Returns for GetNumberOfWorkers requests
     * </pre>
     */
    int getNumWorkers();

    /**
     * <code>optional string postURL = 3;</code>
     *
     * <pre>
     * Returns for HireWorkers posts
     * </pre>
     */
    boolean hasPostURL();
    /**
     * <code>optional string postURL = 3;</code>
     *
     * <pre>
     * Returns for HireWorkers posts
     * </pre>
     */
    java.lang.String getPostURL();
    /**
     * <code>optional string postURL = 3;</code>
     *
     * <pre>
     * Returns for HireWorkers posts
     * </pre>
     */
    com.google.protobuf.ByteString
        getPostURLBytes();
  }
  /**
   * Protobuf type {@code com.github.keenon.lense.human_server.MTurkAPIResponse}
   */
  public static final class MTurkAPIResponse extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:com.github.keenon.lense.human_server.MTurkAPIResponse)
      MTurkAPIResponseOrBuilder {
    // Use MTurkAPIResponse.newBuilder() to construct.
    private MTurkAPIResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MTurkAPIResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MTurkAPIResponse defaultInstance;
    public static MTurkAPIResponse getDefaultInstance() {
      return defaultInstance;
    }

    public MTurkAPIResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MTurkAPIResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.github.keenon.lense.human_server.MTurkAPIProto.MessageType value = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              reqID_ = input.readInt32();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              postURL_ = bs;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              numWorkers_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.class, com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<MTurkAPIResponse> PARSER =
        new com.google.protobuf.AbstractParser<MTurkAPIResponse>() {
      public MTurkAPIResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MTurkAPIResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MTurkAPIResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private com.github.keenon.lense.human_server.MTurkAPIProto.MessageType type_;
    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
     */
    public com.github.keenon.lense.human_server.MTurkAPIProto.MessageType getType() {
      return type_;
    }

    public static final int REQID_FIELD_NUMBER = 2;
    private int reqID_;
    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that is be included in all responses, so that they can be routed correctly
     * </pre>
     */
    public boolean hasReqID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 reqID = 2;</code>
     *
     * <pre>
     * This is the ID that is be included in all responses, so that they can be routed correctly
     * </pre>
     */
    public int getReqID() {
      return reqID_;
    }

    public static final int NUMWORKERS_FIELD_NUMBER = 4;
    private int numWorkers_;
    /**
     * <code>optional int32 numWorkers = 4;</code>
     *
     * <pre>
     * Returns for GetNumberOfWorkers requests
     * </pre>
     */
    public boolean hasNumWorkers() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 numWorkers = 4;</code>
     *
     * <pre>
     * Returns for GetNumberOfWorkers requests
     * </pre>
     */
    public int getNumWorkers() {
      return numWorkers_;
    }

    public static final int POSTURL_FIELD_NUMBER = 3;
    private java.lang.Object postURL_;
    /**
     * <code>optional string postURL = 3;</code>
     *
     * <pre>
     * Returns for HireWorkers posts
     * </pre>
     */
    public boolean hasPostURL() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string postURL = 3;</code>
     *
     * <pre>
     * Returns for HireWorkers posts
     * </pre>
     */
    public java.lang.String getPostURL() {
      java.lang.Object ref = postURL_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          postURL_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string postURL = 3;</code>
     *
     * <pre>
     * Returns for HireWorkers posts
     * </pre>
     */
    public com.google.protobuf.ByteString
        getPostURLBytes() {
      java.lang.Object ref = postURL_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        postURL_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
      reqID_ = 0;
      numWorkers_ = 0;
      postURL_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasReqID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, reqID_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(3, getPostURLBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, numWorkers_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, reqID_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getPostURLBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, numWorkers_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.github.keenon.lense.human_server.MTurkAPIResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.github.keenon.lense.human_server.MTurkAPIResponse)
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.class, com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.Builder.class);
      }

      // Construct using com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
        bitField0_ = (bitField0_ & ~0x00000001);
        reqID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        numWorkers_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        postURL_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_descriptor;
      }

      public com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse getDefaultInstanceForType() {
        return com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.getDefaultInstance();
      }

      public com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse build() {
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse buildPartial() {
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse result = new com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.reqID_ = reqID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.numWorkers_ = numWorkers_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.postURL_ = postURL_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse) {
          return mergeFrom((com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse other) {
        if (other == com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasReqID()) {
          setReqID(other.getReqID());
        }
        if (other.hasNumWorkers()) {
          setNumWorkers(other.getNumWorkers());
        }
        if (other.hasPostURL()) {
          bitField0_ |= 0x00000008;
          postURL_ = other.postURL_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasReqID()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.github.keenon.lense.human_server.MTurkAPIProto.MTurkAPIResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.github.keenon.lense.human_server.MTurkAPIProto.MessageType type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public com.github.keenon.lense.human_server.MTurkAPIProto.MessageType getType() {
        return type_;
      }
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public Builder setType(com.github.keenon.lense.human_server.MTurkAPIProto.MessageType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .com.github.keenon.lense.human_server.MessageType type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = com.github.keenon.lense.human_server.MTurkAPIProto.MessageType.GetNumberOfWorkers;
        onChanged();
        return this;
      }

      private int reqID_ ;
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that is be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public boolean hasReqID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that is be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public int getReqID() {
        return reqID_;
      }
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that is be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public Builder setReqID(int value) {
        bitField0_ |= 0x00000002;
        reqID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 reqID = 2;</code>
       *
       * <pre>
       * This is the ID that is be included in all responses, so that they can be routed correctly
       * </pre>
       */
      public Builder clearReqID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        reqID_ = 0;
        onChanged();
        return this;
      }

      private int numWorkers_ ;
      /**
       * <code>optional int32 numWorkers = 4;</code>
       *
       * <pre>
       * Returns for GetNumberOfWorkers requests
       * </pre>
       */
      public boolean hasNumWorkers() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 numWorkers = 4;</code>
       *
       * <pre>
       * Returns for GetNumberOfWorkers requests
       * </pre>
       */
      public int getNumWorkers() {
        return numWorkers_;
      }
      /**
       * <code>optional int32 numWorkers = 4;</code>
       *
       * <pre>
       * Returns for GetNumberOfWorkers requests
       * </pre>
       */
      public Builder setNumWorkers(int value) {
        bitField0_ |= 0x00000004;
        numWorkers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numWorkers = 4;</code>
       *
       * <pre>
       * Returns for GetNumberOfWorkers requests
       * </pre>
       */
      public Builder clearNumWorkers() {
        bitField0_ = (bitField0_ & ~0x00000004);
        numWorkers_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object postURL_ = "";
      /**
       * <code>optional string postURL = 3;</code>
       *
       * <pre>
       * Returns for HireWorkers posts
       * </pre>
       */
      public boolean hasPostURL() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string postURL = 3;</code>
       *
       * <pre>
       * Returns for HireWorkers posts
       * </pre>
       */
      public java.lang.String getPostURL() {
        java.lang.Object ref = postURL_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            postURL_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string postURL = 3;</code>
       *
       * <pre>
       * Returns for HireWorkers posts
       * </pre>
       */
      public com.google.protobuf.ByteString
          getPostURLBytes() {
        java.lang.Object ref = postURL_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          postURL_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string postURL = 3;</code>
       *
       * <pre>
       * Returns for HireWorkers posts
       * </pre>
       */
      public Builder setPostURL(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        postURL_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string postURL = 3;</code>
       *
       * <pre>
       * Returns for HireWorkers posts
       * </pre>
       */
      public Builder clearPostURL() {
        bitField0_ = (bitField0_ & ~0x00000008);
        postURL_ = getDefaultInstance().getPostURL();
        onChanged();
        return this;
      }
      /**
       * <code>optional string postURL = 3;</code>
       *
       * <pre>
       * Returns for HireWorkers posts
       * </pre>
       */
      public Builder setPostURLBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        postURL_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:com.github.keenon.lense.human_server.MTurkAPIResponse)
    }

    static {
      defaultInstance = new MTurkAPIResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:com.github.keenon.lense.human_server.MTurkAPIResponse)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035src/main/proto/MTurkAPI.proto\022$com.git" +
      "hub.keenon.lense.human_server\"t\n\017MTurkAP" +
      "IRequest\022?\n\004type\030\001 \002(\01621.com.github.keen" +
      "on.lense.human_server.MessageType\022\r\n\005req" +
      "ID\030\002 \002(\005\022\021\n\tnumToHire\030\003 \001(\005\"\207\001\n\020MTurkAPI" +
      "Response\022?\n\004type\030\001 \002(\01621.com.github.keen" +
      "on.lense.human_server.MessageType\022\r\n\005req" +
      "ID\030\002 \002(\005\022\022\n\nnumWorkers\030\004 \001(\005\022\017\n\007postURL\030" +
      "\003 \001(\t*6\n\013MessageType\022\026\n\022GetNumberOfWorke" +
      "rs\020\001\022\017\n\013HireWorkers\020\002B5\n$com.github.keen",
      "on.lense.human_serverB\rMTurkAPIProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_github_keenon_lense_human_server_MTurkAPIRequest_descriptor,
        new java.lang.String[] { "Type", "ReqID", "NumToHire", });
    internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_com_github_keenon_lense_human_server_MTurkAPIResponse_descriptor,
        new java.lang.String[] { "Type", "ReqID", "NumWorkers", "PostURL", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
